You’re fighting the classic Chrome “tiny overflow = extra blank page” bug. The fastest bullet-proof fix is to print in an isolated window so none of your app’s CSS/layout can push a second page.

Do these two changes and it will print one A4 page every time.

1) Add a tiny print helper (no dependencies)

Put this function somewhere you can import (or inside Laboratory.tsx):

function printIsolated(html: string, title = "Print") {
  const w = window.open("", "_blank", "width=900,height=1200");
  if (!w) return;

  const css = `
    <style>
      @page { size: A4; margin: 12mm; }
      html, body { margin: 0; padding: 0; }
      .rx-print {
        width: 210mm;
        min-height: calc(297mm - 24mm); /* inside page margins */
        padding: 10mm;
        box-sizing: border-box;
        display: flex; flex-direction: column;
      }
      .mt-auto { margin-top: auto !important; } /* pin footer to bottom */
      /* Safety: if content is just a tad tall, gently scale to fit */
      .fit { transform: scale(0.98); transform-origin: top left; }
    </style>
  `;

  w.document.write(`<html><head><title>${title}</title>${css}</head><body>${html}</body></html>`);
  w.document.close();

  // Give the new window a tick to render before printing
  setTimeout(() => { w.focus(); w.print(); w.close(); }, 200);
}


Note: we add a tiny 0.98 scale so small rounding differences never spill onto page 2.

2) Call it from your Lab print buttons

Make sure your printable wrappers have a single class (rx-print) and do not use min-h:100vh or print:h:[…]. Then:

const printLabRequest = () => {
  setShowLabRequest(true);
  setTimeout(() => {
    const node = document.getElementById("lab-request-print");
    if (node) printIsolated(`<div class="rx-print fit">${node.innerHTML}</div>`, "Lab Request");
    setShowLabRequest(false);
  }, 50);
};

const printLabReport = () => {
  setShowLabReport(true);
  setTimeout(() => {
    const node = document.getElementById("lab-report-print");
    if (node) printIsolated(`<div class="rx-print fit">${node.innerHTML}</div>`, "Lab Report");
    setShowLabReport(false);
  }, 50);
};


That’s it—no global @media print hacks, no visibility:hidden tricks, no 100vh. You’re printing a single, fixed A4 page that can’t be affected by anything else in the app, so the stray second page disappears.

If you prefer to keep in-page printing (no new window)

Swap your global print CSS to display:none everything except the active print node (visibility still reserves layout and can cause page 2):

@media print {
  @page { size: A4; margin: 12mm; }
  body * { display: none !important; }
  #lab-request-print, #lab-request-print * { display: block !important; }
  #lab-report-print,  #lab-report-print  * { display: block !important; }
}